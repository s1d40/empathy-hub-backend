from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from app import schemas
from app import crud
from app.db.session import get_db

router = APIRouter()

@router.post("/", response_model=schemas.UserRead)
def create_user_endpoint(
    *,
    db: Session = Depends(get_db),
    user_in: schemas.UserCreate
):
    """
    Create new user.
    Backend generates anonymous_id.
    If username is provided by the client, it's checked for uniqueness.
    If username is not provided, a unique "Anonymous" username is generated by the CRUD layer.
    """
    # anonymous_id is now generated by the backend (in crud.create_user),
    # so we don't check for its existence based on client input here.
    # UUIDs are unique by nature.

    if user_in.username:
        existing_username = crud.crud_user.get_user_by_username(db, username=user_in.username)
        if existing_username:
            raise HTTPException(
                status_code=400,
                detail="Username already registered. Please choose a different one."
            )
    
    try:
        user = crud.crud_user.create_user(db=db, user=user_in)
    except ValueError as e: # Catch potential errors from CRUD, e.g., if generated username still conflicts
        # This is highly unlikely with the current CRUD logic but good for robustness
        raise HTTPException(status_code=500, detail=f"Error creating user: {e}")
    return user

@router.get("/", response_model=List[schemas.UserRead])
def read_users_endpoint(
    db: Session = Depends(get_db),
    skip: int = 0,
    limit: int = 100,
):
    """
    Retrieve users.
    """
    users = crud.crud_user.get_users(db, skip=skip, limit=limit)
    return users

@router.get("/{user_id}", response_model=schemas.UserRead)
def read_user_endpoint(
    user_id: int,
    db: Session = Depends(get_db),
):
    """
    Get user by ID.
    """
    db_user = crud.crud_user.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user