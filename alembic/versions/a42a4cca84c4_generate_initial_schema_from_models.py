"""generate_initial_schema_from_models

Revision ID: a42a4cca84c4
Revises: 
Create Date: 2025-05-12 00:11:34.488036

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Import for explicit UUID type


# revision identifiers, used by Alembic.
revision: str = 'a42a4cca84c4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Users Table Alteration (MUST BE FIRST) ---
    op.alter_column('users', 'anonymous_id',
               existing_type=sa.VARCHAR(), # Assuming it was VARCHAR
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='anonymous_id::uuid') # Crucial for casting

    # --- Posts Table ---
    op.create_table('posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_post_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False), # Assuming length from model
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('author_anonymous_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('upvotes', sa.Integer(), nullable=False),
    sa.Column('downvotes', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, onupdate=sa.text('now()')),
    sa.ForeignKeyConstraint(['author_anonymous_id'], ['users.anonymous_id'], name=op.f('fk_posts_author_anonymous_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_posts'))
    )
    op.create_index(op.f('ix_posts_anonymous_post_id'), 'posts', ['anonymous_post_id'], unique=True)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)
    op.create_index(op.f('ix_posts_title'), 'posts', ['title'], unique=False)
    op.create_index(op.f('ix_posts_author_anonymous_id'), 'posts', ['author_anonymous_id'], unique=False)

    # --- Comments Table ---
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_comment_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, onupdate=sa.text('now()')),
    sa.Column('post_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('author_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.anonymous_id'], name=op.f('fk_comments_author_id_users')),
    sa.ForeignKeyConstraint(['post_id'], ['posts.anonymous_post_id'], name=op.f('fk_comments_post_id_posts')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_comments'))
    )
    op.create_index(op.f('ix_comments_anonymous_comment_id'), 'comments', ['anonymous_comment_id'], unique=True)
    op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    op.create_index(op.f('ix_comments_post_id'), 'comments', ['post_id'], unique=False)
    op.create_index(op.f('ix_comments_author_id'), 'comments', ['author_id'], unique=False)

    # --- PostVoteLogs Table ---
    op.create_table('post_vote_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_anonymous_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('post_anonymous_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetypeenum_sqlalchemy'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['post_anonymous_id'], ['posts.anonymous_post_id'], name=op.f('fk_post_vote_logs_post_anonymous_id_posts')),
    sa.ForeignKeyConstraint(['user_anonymous_id'], ['users.anonymous_id'], name=op.f('fk_post_vote_logs_user_anonymous_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_post_vote_logs')),
    sa.UniqueConstraint('user_anonymous_id', 'post_anonymous_id', name=op.f('uq_post_vote_logs_user_anonymous_id_post_anonymous_id'))
    )
    op.create_index(op.f('ix_post_vote_logs_id'), 'post_vote_logs', ['id'], unique=False)
    op.create_index(op.f('ix_post_vote_logs_user_anonymous_id'), 'post_vote_logs', ['user_anonymous_id'], unique=False)
    op.create_index(op.f('ix_post_vote_logs_post_anonymous_id'), 'post_vote_logs', ['post_anonymous_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_vote_logs_post_anonymous_id'), table_name='post_vote_logs')
    op.drop_index(op.f('ix_post_vote_logs_user_anonymous_id'), table_name='post_vote_logs')
    op.drop_index(op.f('ix_post_vote_logs_id'), table_name='post_vote_logs')
    op.drop_table('post_vote_logs')
    op.drop_index(op.f('ix_comments_author_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_post_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_anonymous_comment_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_posts_author_anonymous_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_title'), table_name='posts')
    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_anonymous_post_id'), table_name='posts')
    op.drop_table('posts')
    op.alter_column('users', 'anonymous_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.VARCHAR(), # Or the original type if known
               existing_nullable=False,
               postgresql_using='anonymous_id::text')
    # ### end Alembic commands ###
