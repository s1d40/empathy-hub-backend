"""create initial tables

Revision ID: 795852a330e0
Revises: 
Create Date: 2025-05-21 04:15:55.345265

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '795852a330e0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chat_rooms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_room_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('is_group', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_rooms_anonymous_room_id'), 'chat_rooms', ['anonymous_room_id'], unique=True)
    op.create_index(op.f('ix_chat_rooms_id'), 'chat_rooms', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('avatar_url', sa.String(), nullable=True),
    sa.Column('chat_availability', sa.Enum('OPEN_TO_CHAT', 'REQUEST_ONLY', 'DO_NOT_DISTURB', name='chatavailabilityenum'), nullable=False),
    sa.Column('pronouns', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_anonymous_id'), 'users', ['anonymous_id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('chat_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_message_id', sa.UUID(), nullable=False),
    sa.Column('chatroom_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('sender_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['chatroom_anonymous_id'], ['chat_rooms.anonymous_room_id'], ),
    sa.ForeignKeyConstraint(['sender_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_messages_anonymous_message_id'), 'chat_messages', ['anonymous_message_id'], unique=True)
    op.create_index(op.f('ix_chat_messages_id'), 'chat_messages', ['id'], unique=False)
    op.create_table('chat_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_request_id', sa.UUID(), nullable=False),
    sa.Column('requester_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('requestee_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('initial_message', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'DECLINED', 'CANCELLED', name='chatrequeststatusenum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('responded_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['requestee_anonymous_id'], ['users.anonymous_id'], ),
    sa.ForeignKeyConstraint(['requester_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_requests_anonymous_request_id'), 'chat_requests', ['anonymous_request_id'], unique=True)
    op.create_index(op.f('ix_chat_requests_id'), 'chat_requests', ['id'], unique=False)
    op.create_table('chatroom_participants',
    sa.Column('chatroom_id', sa.UUID(), nullable=False),
    sa.Column('user_anonymous_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['chatroom_id'], ['chat_rooms.anonymous_room_id'], ),
    sa.ForeignKeyConstraint(['user_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('chatroom_id', 'user_anonymous_id')
    )
    op.create_table('posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_post_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('author_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('upvotes', sa.Integer(), nullable=False),
    sa.Column('downvotes', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['author_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_posts_anonymous_post_id'), 'posts', ['anonymous_post_id'], unique=True)
    op.create_index(op.f('ix_posts_id'), 'posts', ['id'], unique=False)
    op.create_index(op.f('ix_posts_title'), 'posts', ['title'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_report_id', sa.UUID(), nullable=False),
    sa.Column('reporter_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('reported_item_type', sa.Enum('USER', 'POST', 'COMMENT', name='reporteditemtypeenum_sqlalchemy'), nullable=False),
    sa.Column('reported_item_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'REVIEWED_ACTION_TAKEN', 'REVIEWED_NO_ACTION', 'DISMISSED', name='reportstatusenum_sqlalchemy'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['reporter_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reports_anonymous_report_id'), 'reports', ['anonymous_report_id'], unique=True)
    op.create_index(op.f('ix_reports_id'), 'reports', ['id'], unique=False)
    op.create_table('user_relationships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('actor_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('target_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('relationship_type', sa.Enum('MUTE', 'BLOCK', name='relationshiptypeenum_sqlalchemy'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['actor_anonymous_id'], ['users.anonymous_id'], ),
    sa.ForeignKeyConstraint(['target_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('actor_anonymous_id', 'target_anonymous_id', 'relationship_type', name='uq_actor_target_relationship_type')
    )
    op.create_index(op.f('ix_user_relationships_id'), 'user_relationships', ['id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('anonymous_comment_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('upvotes', sa.Integer(), nullable=False),
    sa.Column('downvotes', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.UUID(), nullable=False),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.anonymous_id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.anonymous_post_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comments_anonymous_comment_id'), 'comments', ['anonymous_comment_id'], unique=True)
    op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    op.create_table('post_vote_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('post_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetypeenum_sqlalchemy'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['post_anonymous_id'], ['posts.anonymous_post_id'], ),
    sa.ForeignKeyConstraint(['user_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_anonymous_id', 'post_anonymous_id', name='uq_user_post_vote_uc')
    )
    op.create_index(op.f('ix_post_vote_logs_id'), 'post_vote_logs', ['id'], unique=False)
    op.create_table('comment_vote_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('comment_anonymous_id', sa.UUID(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='comment_vote_enum_type'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['comment_anonymous_id'], ['comments.anonymous_comment_id'], ),
    sa.ForeignKeyConstraint(['user_anonymous_id'], ['users.anonymous_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_anonymous_id', 'comment_anonymous_id', name='uq_user_comment_vote_uc')
    )
    op.create_index(op.f('ix_comment_vote_logs_id'), 'comment_vote_logs', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_comment_vote_logs_id'), table_name='comment_vote_logs')
    op.drop_table('comment_vote_logs')
    op.drop_index(op.f('ix_post_vote_logs_id'), table_name='post_vote_logs')
    op.drop_table('post_vote_logs')
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_anonymous_comment_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_user_relationships_id'), table_name='user_relationships')
    op.drop_table('user_relationships')
    op.drop_index(op.f('ix_reports_id'), table_name='reports')
    op.drop_index(op.f('ix_reports_anonymous_report_id'), table_name='reports')
    op.drop_table('reports')
    op.drop_index(op.f('ix_posts_title'), table_name='posts')
    op.drop_index(op.f('ix_posts_id'), table_name='posts')
    op.drop_index(op.f('ix_posts_anonymous_post_id'), table_name='posts')
    op.drop_table('posts')
    op.drop_table('chatroom_participants')
    op.drop_index(op.f('ix_chat_requests_id'), table_name='chat_requests')
    op.drop_index(op.f('ix_chat_requests_anonymous_request_id'), table_name='chat_requests')
    op.drop_table('chat_requests')
    op.drop_index(op.f('ix_chat_messages_id'), table_name='chat_messages')
    op.drop_index(op.f('ix_chat_messages_anonymous_message_id'), table_name='chat_messages')
    op.drop_table('chat_messages')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_anonymous_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_chat_rooms_id'), table_name='chat_rooms')
    op.drop_index(op.f('ix_chat_rooms_anonymous_room_id'), table_name='chat_rooms')
    op.drop_table('chat_rooms')
    # ### end Alembic commands ###
